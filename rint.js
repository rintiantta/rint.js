// Generated by CoffeeScript 1.6.3
Object.defineProperties(Object.prototype, {
  define: {
    value: function(object) {
      var item, key, _results;
      _results = [];
      for (key in object) {
        item = object[key];
        _results.push(Object.defineProperty(this.prototype, key, {
          value: item
        }));
      }
      return _results;
    }
  },
  extend: {
    value: function(object) {
      var item, key, _results;
      _results = [];
      for (key in object) {
        item = object[key];
        _results.push(Object.defineProperty(this, key, {
          value: item
        }));
      }
      return _results;
    }
  }
});

Object.define({
  type: function() {
    return "object";
  },
  size: function() {
    var key, object, output;
    output = 0;
    for (key in this) {
      object = this[key];
      output += 1;
    }
    return output;
  },
  toArray: function(key) {
    var data, item, name, output;
    output = [];
    if (key) {
      for (name in this) {
        item = this[name];
        data = {};
        data[key] = name;
        data.value = item;
        output.push(data);
      }
    } else {
      for (name in this) {
        item = this[name];
        output.push(item);
      }
    }
    return output;
  }
});

String.define({
  type: function() {
    return "string";
  },
  startWith: function(string) {
    return this.indexOf(string) === 0;
  },
  endWith: function(string) {
    return this.lastIndexOf(string) === this.length - 1;
  },
  contain: function(string) {
    return this.indexOf(string) !== -1;
  },
  notContain: function(string) {
    return !this.contain(string);
  },
  containAll: function(array) {
    var item, output, _i, _len;
    output = true;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (this.notContain(item)) {
        break;
      }
    }
    return output;
  },
  containSome: function(array) {
    var item, _i, _len;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (this.contain(item)) {
        return true;
      }
    }
  },
  "eval": function() {
    return eval(this);
  },
  empty: function() {
    return Boolean(this.length);
  },
  notEmpty: function() {
    return !this.empty();
  },
  toNumber: function() {
    return Number(this);
  }
});

Boolean.define({
  type: function() {
    return "boolean";
  }
});

Number.define({
  type: function() {
    return "number";
  },
  isFinite: function() {
    return isFinite(this);
  },
  floor: function() {
    return Math.floor(this);
  },
  ceil: function() {
    return Math.ceil(this);
  },
  round: function() {
    return Math.round(this);
  }
});

Number.extend({
  random: function(a, b) {
    if (b) {
      return Math.floor(Rint.randomFloat(a, b));
    } else {
      return Math.floor(Rint.randomFloat(a));
    }
  },
  randomFloat: function(a, b) {
    if (b) {
      return (Math.random() * (b - a)) + a;
    } else {
      return Math.random() * a;
    }
  }
});

Function.define({
  type: function() {
    return "function";
  }
});

Function.extend({
  nothing: function() {},
  parallel: function(tasks, callback) {
    var completed, item, key, results, _fn;
    completed = 0;
    if (tasks.type() === "object") {
      results = {};
    } else if (tasks.type() === "array") {
      results = [];
    } else {
      throw "Function.parallel()'s parameter must be 'array' or 'object'.";
    }
    _fn = function() {
      return item(function(result) {
        completed += 1;
        results[key] = result;
        if (completed === tasks.size()) {
          if (callback) {
            return callback(results);
          }
        }
      });
    };
    for (key in tasks) {
      item = tasks[key];
      _fn(key);
    }
  },
  sequence: function(tasks, callback) {
    var completed, recursion, results;
    completed = 0;
    if (tasks.type() === "object") {
      results = {};
    } else if (tasks.type() === "array") {
      results = [];
    } else {
      throw "Function.parallel()'s parameter must be 'array' or 'object'.";
    }
    tasks = tasks.toArray('key');
    recursion = function(task) {
      return task.value(function(result) {
        results[task.key] = result;
        completed += 1;
        if (completed === tasks.size()) {
          if (callback) {
            return callback(results);
          }
        } else {
          return recursion(tasks[completed]);
        }
      });
    };
    recursion(tasks[completed]);
  },
  next: function(callback) {
    return setTimeout(callback, 0);
  }
});

Array.define({
  type: function() {
    return "array";
  },
  empty: function() {
    return Boolean(this.length);
  },
  notEmpty: function() {
    return !this.empty();
  },
  random: function() {
    if (this.notEmpty()) {
      return this[Rint.random(0, this.lastIndex() - 1)];
    }
  },
  remove: function(item) {
    return this.splice(this.indexOf(item), 1);
  },
  removeAt: function(index) {
    return this.splice(index, 1);
  },
  first: function() {
    if (this[0]) {
      return this[0];
    }
  },
  last: function() {
    if (this.notEmpty()) {
      return this[this.lastIndex()];
    }
  },
  lastIndex: function() {
    if (this.notEmpty()) {
      return this.length - 1;
    }
  },
  compact: function() {
    return this.filter(function(item) {
      return Boolean(item);
    });
  },
  contain: function(any) {
    var i, item, _i, _len;
    for (item = _i = 0, _len = this.length; _i < _len; item = ++_i) {
      i = this[item];
      if (item === any) {
        return true;
      }
    }
  },
  size: function() {
    return this.length;
  }
});

Array.extend({
  create: function() {
    var item, output, _i, _len;
    output = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      item = arguments[_i];
      output.push(item);
    }
    return output;
  },
  union: function() {
    var array, item, output, _i, _j, _len, _len1;
    output = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      array = arguments[_i];
      for (_j = 0, _len1 = array.length; _j < _len1; _j++) {
        item = array[_j];
        output.push(item);
      }
    }
    return output;
  }
});
